-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/githubuser/my-project#readme</a>
@package my-project
@version 0.1.0.0

module User

-- | Define a type User, each user has a username of type String and a
--   userid of type Int
data User
User :: String -> Int -> User
[userName] :: User -> String
[userId] :: User -> Int

-- | Generate a list of 10 users
userList :: [User]
instance GHC.Show.Show User.User

module Message

-- | Define a type Message, each has a message of type String, a senderid
--   of type Int and a receiverid of type Int
data Message
Message :: String -> Int -> Int -> Message
[message] :: Message -> String
[senderId] :: Message -> Int
[receiverId] :: Message -> Int

-- | Start sending message
sendMessage :: Int -> MVar [Message] -> IO ()

-- | Count the total number of messages each user received
countMessage :: [Message] -> User -> IO ()
instance GHC.Show.Show Message.Message
